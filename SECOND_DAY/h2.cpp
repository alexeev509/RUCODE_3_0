#include "iostream"
#include "vector"

using namespace std;

vector<vector<long long>> c;
vector<long long> a;
int n, k;
long long p;

void print() {
    for (int i = 0; i <= n; ++i) {
        for (int j = 0; j <= n; ++j) {
            cout << c[i][j] << " ";
        }
        cout << "\n";
    }
}

void create_c() {
    c[0][0] = 1;
    for (int i = 1; i <= n; ++i) {
        c[i][0] = 1;
        for (int j = 1; j <= n; ++j) {
            c[i][j] = c[i - 1][j] + c[i - 1][j - 1];
        }
    }
//    print();
}

int main() {
    cin >> n >> k >> p;
    c.resize(n + 1, vector<long long>(n + 1));
    a.resize(n);
    create_c();
    for (int i = 0; i < n; ++i) {
        a[i] = i + 1;
    }
    long bigger_then=-1;
    for(int i =0;i<k; ++i){
        for(int j =0; j<n; ++j){
            if(a[j]>bigger_then){
                if(p<c[n-a[j]][k-i-1]){
                    a[i]=a[j];
                    bigger_then =  a[i];
                    break;
                } else{
                    p-=c[n-a[j]][k-i-1];
                }
            }
        }
    }
    for (int i = 0; i < k; ++i)
        cout << a[i] << " ";
    return 0;
}

//Входные данные:
//4 2 5

//Ответ:
//3 4

//a = 1 2 3 4

//Алгоритм:
//Попробуем поставить на первую позицию 1:
// тогда нужно посчитать количество перестановок после 1: С[1,3] = 3
//p-3 = 2;
//Попробуем на первую позицию поставить 2
// тогда нужно посчитать количество перестановок после 2: С[1,2] = 2

//2<2?
//p=2-2 = 0;
//Попробуем на первую позицию поставить 3
// тогда нужно посчитать количество перестановок после 2: С[1,1] = 1

//0<1? - YES
//Значит на первую позицию можем поставить 3;

//Мы знаем что на вторую позицию можем поставить элемент больше трех;
//Начинаем перебирать и заоодно проверяем - что элемент больше 3х;
// Только 4 больше 3-х - поэтому на вторую позицию мы можем поставить только 4


//А это просто перестановки выписанные по порядку:
//1 2
//1 3
//1 4
//2 3
//2 4
//3 4
